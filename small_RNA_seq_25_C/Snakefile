configfile: "config.yaml"

################################################################################
### python modules
################################################################################

import os
import sys
import pandas as pd

################################################################################
### Custom functions
################################################################################

def get_samples():
    design_table = pd.read_csv(config["samples"], sep="\t", header=0)
    return list(design_table["sample"])

    # return ["dpf_3_delta_38_Hrs_Rev6_REPLICATE_B"]

def get_fq_1(wildcards):
    design_table = pd.read_csv(config["samples"], sep="\t", index_col="sample")
    return str(design_table.loc[wildcards.sample]["fq1"])

def get_fq_2(wildcards):
    design_table = pd.read_csv(config["samples"], sep="\t", index_col="sample")
    return str(design_table.loc[wildcards.sample]["fq2"])

################################################################################
### Finish
################################################################################

rule finish:
    input:
        # bai = expand(os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.bam.bai"), sample=get_samples()),
        fastqc = expand(os.path.join(config["output_dir"], "{sample}", "fastqc"), sample=get_samples()),
        # reads = expand(os.path.join(config["output_dir"], "{sample}", "trim_3p_adapter.fastq.gz"), sample=get_samples())
        #fastqc_filtered = expand(os.path.join(config["output_dir"], "{sample}", "fastqc_filtered"), sample=get_samples()),
        plot_small_RNAs = expand(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs"),
                                 zip,
                                 experiment1 = [i[0]  for i in list(config["combinations"])],
                                 experiment2 = [i[1]  for i in list(config["combinations"])]),
        plot_small_RNAs_unique_mappers = expand(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs_unique_mappers"),
                                 zip,
                                 experiment1 = [i[0]  for i in list(config["combinations"])],
                                 experiment2 = [i[1]  for i in list(config["combinations"])]),
        # # gtf = os.path.join(config["output_dir"], "annotation", "c_elegans.WS220.annotations.trs.exon.corrected_with_gene_id.sorted.gtf"),
        # pdf_alfa_aligment_statistics = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics", "alfa_aligment_statistics.Biotypes.pdf"), sample=get_samples()),
        # pdf_alfa_aligment_statistics_filter = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_filter", "alfa_aligment_statistics_filter.Biotypes.pdf"), sample=get_samples()),
        # pdf_alfa_aligment_statistics_unique_mappers = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers", "alfa_aligment_statistics_unique_mappers.Biotypes.pdf"), sample=get_samples()),
        # pdf_alfa_aligment_statistics_unique_mappers_filter_miRNAs = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers_filter_miRNAs", "alfa_aligment_statistics_unique_mappers_filter_miRNAs.Biotypes.pdf"), sample=get_samples())
        # multiqc_dir = directory(os.path.join(config["output_dir"], "summary", "qc"))




################################################################################
### Extract gtf with miRNAs
################################################################################

rule create_mirna_gtf:
    input:
        gtf = config["gtf"],
    output:
        gtf = os.path.join(config["output_dir"], "annotation", "mirnas.gtf")
    log:
        os.path.join(config["local_log"], "create_mirna_gtf.log")
    shell:
        "(grep -P 'transcript_biotype \"miRNA\"' {input.gtf} > {output.gtf}) &> {log}"

################################################################################
### Extract miRNA sequences
################################################################################

rule extract_miRNA_sequences:
    input:
        gtf = os.path.join(config["output_dir"], "annotation", "mirnas.gtf"),
        genome = config["genome"]
    output:
        seq = os.path.join(config["output_dir"], "annotation", "mirnas.fa")
    conda:
        "envs/cufflinks.yaml"
    log:
        os.path.join(config["local_log"], "extract_miRNA_sequences.log")
    shell:
        "(gffread \
        {input.gtf} \
        -g {input.genome} \
        -w {output.seq} \
        ) &> {log}"

# ################################################################################
# ### sort annotation file
# ################################################################################

# rule sort_annotation_file:
#     input:
#         gtf = os.path.join(config["output_dir"], "annotation", "c_elegans.WS220.annotations.trs.exon.corrected_with_gene_id.gtf")
#     output:
#         gtf = os.path.join(config["output_dir"], "annotation", "c_elegans.WS220.annotations.trs.exon.corrected_with_gene_id.sorted.gtf")
#     log:
#         os.path.join(config["local_log"], "sort_annotation_file.log")
#     shell:
#         "(sort -k1,1 -k4,4n -k5,5nr {input.gtf} | sed 's/gene_biotype/biotype/' > {output.gtf}) &> {log}"

# ################################################################################
# ### Generate alfa genome index
# ################################################################################

# rule alfa_genome_index:
#     input:
#         gtf = os.path.join(config["output_dir"], "annotation", "c_elegans.WS220.annotations.trs.exon.corrected_with_gene_id.sorted.gtf"),
#         chr_len = config["genome_size"]
#     output:
#         alfa_index_stranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.stranded.ALFA_index"),
#         alfa_index_unstranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.unstranded.ALFA_index")
#     params:
#         genome_index_basename = os.path.join(config["output_dir"], "annotation", "alfa_genome_index")
#     log:
#         os.path.join(config["local_log"], "alfa_genome_index.log")
#     threads:    8
#     conda:
#         "envs/alfa.yaml"
#     shell:
#         "(alfa \
#         -a {input.gtf} \
#         -g {params.genome_index_basename} \
#         --chr_len {input.chr_len} \
#         -p {threads}) &> {log}"


################################################################################
### Fastqc
################################################################################

rule fastqc:
    input:
        fq_1 = lambda wildcards: get_fq_1(wildcards)
    output:
        outdir = directory(os.path.join(config["output_dir"], "{sample}", "fastqc"))
    conda:
        "envs/fastqc.yaml"
    log:
        os.path.join(config["local_log"], "fastqc_{sample}.log")
    shell:
        "(mkdir -p {output.outdir}; \
        fastqc \
        --outdir {output.outdir} \
        {input.fq_1}) &> {log}"

################################################################################
### Trim 3p adapter
################################################################################

rule trim_3p_adapter_SE:
    input:
        reads = lambda wildcards: get_fq_1(wildcards),
    output:
        reads = os.path.join(config["output_dir"], "{sample}", "trim_3p_adapter.fastq.gz"),
    params:
        adapter = config["adapter"],
        error_rate = 0.1,
        minimum_length = 15,
        overlap = 3,
    log:
        os.path.join(config["local_log"], "trim_3p_adapter_SE_{sample}.log")
    threads:    6
    conda:  "envs/cutadapt.yaml"
    shell:
        "(cutadapt \
        --adapter {params.adapter} \
        --error-rate {params.error_rate} \
        --minimum-length {params.minimum_length} \
        --overlap {params.overlap} \
        --cores {threads} \
        {input.reads} | gzip > {output.reads}) &> {log}"

################################################################################
### Fastqc_filtered
################################################################################

rule fastqc_filtered:
    input:
        reads = os.path.join(config["output_dir"], "{sample}", "trim_3p_adapter.fastq.gz"),
    output:
        outdir = directory(os.path.join(config["output_dir"], "{sample}", "fastqc_filtered"))
    conda:
        "envs/fastqc.yaml"
    log:
        os.path.join(config["local_log"], "fastqc_filtered_{sample}.log")
    shell:
        "(mkdir -p {output.outdir}; \
        fastqc \
        --outdir {output.outdir} \
        {input.reads}) &> {log}"

################################################################################
### bowtie align
################################################################################

rule bowtie_align:
    input:
        reads = os.path.join(config["output_dir"], "{sample}", "trim_3p_adapter.fastq.gz"),
        bowtie_index = config["bowtie_index"]
    output:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.bam")
    params:
        index_prefix = config["bowtie_index"] + "/bowtie"
    threads:   8
    conda:
        "envs/bowtie.yaml"
    log:
        os.path.join(config["local_log"],"bowtie_align_{sample}.log")
    shell:
        "(bowtie \
        -v 0 \
        --all \
        --best \
        --strata \
        --sam \
        --fr \
        --threads {threads} \
        {params.index_prefix} \
        <(zcat {input.reads}) \
        | samtools view -bS - > \
        {output.bam}) &> {log}"

################################################################################
### samtools sort and index
################################################################################

rule samtools_sort_and_index:
    input:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.bam")
    output:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.bam.bai")
    threads:   8
    conda:
        "envs/samtools.yaml"
    log:
        os.path.join(config["local_log"],"samtools_sort_and_index_{sample}.log")
    shell:
        "(samtools sort \
        -m 10G \
        --threads {threads} \
        --output-fmt BAM {input.bam} \
        -o {output.bam}; \
        samtools index -@ {threads} {output.bam} {output.bai};) &> {log}"

# ################################################################################
# ### Determine alignment statistics
# ################################################################################

# rule alfa_aligment_statistics:
#     input:
#         bam = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.bam"), sample1=get_samples()),
#         bai = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.bam.bai"), sample1=get_samples()),
#         alfa_index_stranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.stranded.ALFA_index")
#     output:
#         pdf = os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics", "alfa_aligment_statistics.Biotypes.pdf")
#     params:
#         genome_index_basename = os.path.join(config["output_dir"], "annotation", "alfa_genome_index"),
#         output_prefix = "alfa_aligment_statistics",
#         output_dir = os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics"),
#         bam_and_sample_name = expand(str(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.bam ")) +str("{sample1}"), sample1=get_samples()),
#         strandness = "forward"
#     log:
#         os.path.join(config["local_log"],"alfa_aligment_statistics.log")
#     threads:    8
#     conda:
#         "envs/alfa.yaml"
#     shell:
#         "(mkdir -p {params.output_dir}; \
#         alfa \
#         -g {params.genome_index_basename} \
#         --bam {params.bam_and_sample_name} \
#         -d 2 \
#         --keep_ambiguous \
#         --processors {threads} \
#         --strandness {params.strandness} \
#         --pdf {params.output_prefix} \
#         --temp_dir {params.output_dir} \
#         -o {params.output_dir}; \
#         ) &> {log}"

################################################################################
### Filter small RNAs that we are not interested in
### (rRNA rRNA_pseudogene tRNA tRNA_pseudogene)
################################################################################

rule filter_RNAs:
    input:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.bam.bai"),
        gtf = config["gtf"],
        script = os.path.join(config["scripts"], "filter_RNAs.py"),
    output:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam.bai")
    params:
        filter_RNAs = config["filter_RNAs"],
        filter_chromosomes = config["filter_chromosomes"]
    log:
        os.path.join(config["local_log"],"filter_RNAs_{sample}.log")
    threads:    2
    conda:
        "envs/HTSeq_pandas_samtools_seaborn.yaml"
    shell:
        "(python {input.script} \
        --gtf {input.gtf} \
        --bam {input.bam} \
        --filter_RNAs {params.filter_RNAs} \
        --filter_chromosomes {params.filter_chromosomes} \
        --bam_out {output.bam} \
        --verbose; \
        samtools index -@ {threads} {output.bam} {output.bai};)"

# ################################################################################
# ### Determine alignment statistics after filtering reads
# ################################################################################

# rule alfa_aligment_statistics_filter:
#     input:
#         bam = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.bam"), sample1=get_samples()),
#         bai = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.bam.bai"), sample1=get_samples()),
#         alfa_index_stranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.stranded.ALFA_index")
#     output:
#         pdf = os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_filter", "alfa_aligment_statistics_filter.Biotypes.pdf")
#     params:
#         genome_index_basename = os.path.join(config["output_dir"], "annotation", "alfa_genome_index"),
#         output_prefix = "alfa_aligment_statistics_filter",
#         output_dir = os.path.abspath(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_filter")),
#         bam_and_sample_name = expand(str(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.bam ")) +str("{sample1}"), sample1=get_samples()),
#         strandness = "forward"
#     log:
#         os.path.join(config["local_log"],"alfa_aligment_statistics_filter.log")
#     threads:    8
#     conda:
#         "envs/alfa.yaml"
#     shell:
#         "(mkdir -p {params.output_dir}; \
#         alfa \
#         -g {params.genome_index_basename} \
#         --bam {params.bam_and_sample_name} \
#         -d 2 \
#         --keep_ambiguous \
#         --processors {threads} \
#         --strandness {params.strandness} \
#         --pdf {params.output_prefix} \
#         --temp_dir {params.output_dir} \
#         -o {params.output_dir}; \
#         ) &> {log}"

################################################################################
### count sequences
################################################################################

rule count_sequences:
    input:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam.bai"),
        script = os.path.join(config["scripts"], "count_sequences.py")
    output:
        counts = os.path.join(config["output_dir"], "{sample}", "counts", "alignment.sorted.filtered", "counts.tsv")
    params:
        outdir = os.path.join(config["output_dir"], "{sample}", "counts", "alignment.sorted.filtered")
    threads:    1
    conda:
        "envs/HTSeq_pandas_samtools_seaborn.yaml"
    log:
        os.path.join(config["local_log"],"count_sequences_{sample}.log")
    shell:
        "(python {input.script} \
        --bam {input.bam} \
        --out {params.outdir} \
        --verbose) &> {log}"

################################################################################
### Input preparation for edgeR
################################################################################

rule edgeR_prepare_pairs:
    input:
        counts1 = lambda wildcards: expand(os.path.join(config["output_dir"], "{sample1}", "counts", "alignment.sorted.filtered", "counts.tsv"), sample1=config["experiment_samples"][wildcards.experiment1]),
        counts2 = lambda wildcards: expand(os.path.join(config["output_dir"], "{sample2}", "counts", "alignment.sorted.filtered", "counts.tsv"), sample2=config["experiment_samples"][wildcards.experiment2]),
        script = os.path.join(config["scripts"], "edger_prepare_files.py")
    output:
        counts = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs", "counts.table"),
        conditions = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs", "conditions")
    params:
        output_dir = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs"),
        condition1_name = "{experiment1}",
        condition2_name = "{experiment2}"
    log:
        os.path.join(config["local_log"], "edgeR_prepare_pairs__{experiment1}__{experiment2}.log")
    threads:    1
	shell:
		"(mkdir -p {params.output_dir}; \
		python {input.script} \
		--input_condition1 '{input.counts1}' \
		--condition1_name {params.condition1_name} \
		--input_condition2 '{input.counts2}' \
		--condition2_name {params.condition2_name} \
		--outfile_counts {output.counts} \
		--outfile_conditions {output.conditions}) &> {log}"

################################################################################
### Differential expression between conditions
################################################################################

rule edgeR_differential:
    input:
        counts = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs", "counts.table"),
        conditions = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs", "conditions"),
        script = os.path.join(config["scripts"], "DE_simple.R")
    output:
        table_FDR_low_tsv = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR", "final_table_FDR_low.tsv"),
        table_all = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR", "final_table.tsv")
    params:
        output_dir = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR"),
        cluster_log = os.path.join(config["cluster_log"], "edgeR_differential__{experiment1}__{experiment2}.log")
    conda:
        "envs/DE.yaml"
    log:
        os.path.join(config["local_log"], "edgeR_differential__{experiment1}__{experiment2}.log")
    threads:    1
    shell:
        "(mkdir -p {params.output_dir}; \
        Rscript {input.script} \
        --conditions {input.conditions} \
        --counts {input.counts} \
        --outfolder {params.output_dir}) &> {log}"

################################################################################
### plot_small_RNAs
################################################################################

rule plot_small_RNAs:
    input:
        table_all = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR", "final_table.tsv"),
        mirnas = os.path.join(config["output_dir"], "annotation", "mirnas.fa"),
        script = os.path.join(config["scripts"], "plot_small_RNAs.py")
    output:
        out = directory(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs"))
    params:
        comparison_name = "DE__{experiment1}__{experiment2}"
    log:
        os.path.join(config["local_log"], "plot_small_RNAs__{experiment1}__{experiment2}.log")
    threads:    1
    conda:
        "envs/HTSeq_pandas_samtools_seaborn.yaml"
    shell:
        "(python {input.script} \
        --DE_edgeR_table {input.table_all} \
        --comparison_name {params.comparison_name} \
        --mirnas {input.mirnas} \
        --out {output.out} \
        --verbose;) &> {log}"

################################################################################
### keep unique mappers
################################################################################

rule samtools_keep_unique_mappers:
    input:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.bam.bai")
    output:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam.bai"),
    threads:    1
    conda:
        "envs/samtools.yaml"
    log:
        os.path.join(config["local_log"],"samtools_keep_unique_mappers_{sample}.log")
    shell:
        "(cat \
        <(samtools view -H {input.bam}) \
        <(samtools view {input.bam} |  \
        grep -P \"\tXM\:i\:2\$\")  | \
        samtools view -bS - > {output.bam}; \
        samtools index -@ {threads} {output.bam} {output.bai}; \
        ) &> {log}"

# ################################################################################
# ### Determine alignment statistics unique mappers
# ################################################################################

# rule alfa_aligment_statistics_unique_mappers:
#     input:
#         bam = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam"), sample1=get_samples()),
#         bai = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam.bai"), sample1=get_samples()),
#         alfa_index_stranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.stranded.ALFA_index")
#     output:
#         pdf = os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers", "alfa_aligment_statistics_unique_mappers.Biotypes.pdf")
#     params:
#         genome_index_basename = os.path.join(config["output_dir"], "annotation", "alfa_genome_index"),
#         output_prefix = "alfa_aligment_statistics_unique_mappers",
#         output_dir = os.path.abspath(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers")),
#         bam_and_sample_name = expand(str(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam ")) +str("{sample1}"), sample1=get_samples()),
#         strandness = "forward"
#     log:
#         os.path.join(config["local_log"],"alfa_aligment_statistics_unique_mappers.log")
#     threads:    20
#     conda:
#         "envs/alfa.yaml"
#     shell:
#         "(mkdir -p {params.output_dir}; \
#         alfa \
#         -g {params.genome_index_basename} \
#         --bam {params.bam_and_sample_name} \
#         -d 2 \
#         --keep_ambiguous \
#         --processors {threads} \
#         --strandness {params.strandness} \
#         --pdf {params.output_prefix} \
#         --temp_dir {params.output_dir} \
#         -o {params.output_dir}; \
#         ) &> {log}"

################################################################################
### count sequences unique mappers
################################################################################

rule count_sequences_unique_mappers:
    input:
        bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam"),
        bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam.bai"),
        script = os.path.join(config["scripts"], "count_sequences.py")
    output:
        counts = os.path.join(config["output_dir"], "{sample}", "counts", "alignment.sorted.filtered.unique_mappers", "counts.tsv")
    params:
        outdir = os.path.join(config["output_dir"], "{sample}", "counts", "alignment.sorted.filtered.unique_mappers")
    threads:    1
    conda:
        "envs/HTSeq_pandas_samtools_seaborn.yaml"
    log:
        os.path.join(config["local_log"],"count_sequences_unique_mappers_{sample}.log")
    shell:
        "(python {input.script} \
        --bam {input.bam} \
        --out {params.outdir} \
        --verbose) &> {log}"

################################################################################
### Input preparation for edgeR unique mappers
################################################################################

rule edgeR_prepare_pairs_unique_mappers:
    input:
        counts1 = lambda wildcards: expand(os.path.join(config["output_dir"], "{sample1}", "counts", "alignment.sorted.filtered.unique_mappers", "counts.tsv"), sample1=config["experiment_samples"][wildcards.experiment1]),
        counts2 = lambda wildcards: expand(os.path.join(config["output_dir"], "{sample2}", "counts", "alignment.sorted.filtered.unique_mappers", "counts.tsv"), sample2=config["experiment_samples"][wildcards.experiment2]),
        script = os.path.join(config["scripts"], "edger_prepare_files.py")
    output:
        counts = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs_unique_mappers", "counts.table"),
        conditions = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs_unique_mappers", "conditions")
    params:
        output_dir = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs_unique_mappers"),
        condition1_name = "{experiment1}",
        condition2_name = "{experiment2}"
    log:
        os.path.join(config["local_log"], "edgeR_prepare_pairs_unique_mappers_{experiment1}__{experiment2}.log")
    threads:    1
	shell:
		"(mkdir -p {params.output_dir}; \
		python {input.script} \
		--input_condition1 '{input.counts1}' \
		--condition1_name {params.condition1_name} \
		--input_condition2 '{input.counts2}' \
		--condition2_name {params.condition2_name} \
		--outfile_counts {output.counts} \
		--outfile_conditions {output.conditions}) &> {log}"

################################################################################
### Differential expression between conditions unique mappers
################################################################################

rule edgeR_differential_unique_mappers:
    input:
        counts = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs_unique_mappers", "counts.table"),
        conditions = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "prepare_pairs_unique_mappers", "conditions"),
        script = os.path.join(config["scripts"], "DE_simple.R")
    output:
        table_FDR_low_tsv = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR_unique_mappers", "final_table_FDR_low.tsv"),
        table_all = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR_unique_mappers", "final_table.tsv")
    params:
        output_dir = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR_unique_mappers"),
        cluster_log = os.path.join(config["cluster_log"], "edgeR_differential__{experiment1}__{experiment2}.log")
    conda:
        "envs/DE.yaml"
    log:
        os.path.join(config["local_log"], "edgeR_differential_unique_mappers_{experiment1}__{experiment2}.log")
    threads:    1
    shell:
        "(mkdir -p {params.output_dir}; \
        Rscript {input.script} \
        --conditions {input.conditions} \
        --counts {input.counts} \
        --outfolder {params.output_dir}) &> {log}"

################################################################################
### plot_small_RNAs unique mappers
################################################################################

rule plot_small_RNAs_unique_mappers:
    input:
        table_all = os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "DE_edgeR_unique_mappers", "final_table.tsv"),
        mirnas = os.path.join(config["output_dir"], "annotation", "mirnas.fa"),
        script = os.path.join(config["scripts"], "plot_small_RNAs.py")
    output:
        out = directory(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs_unique_mappers"))
    params:
        comparison_name = "DE_unique_mappers__{experiment1}__{experiment2}"
    log:
        os.path.join(config["local_log"], "plot_small_RNAs_unique_mappers_{experiment1}__{experiment2}.log")
    threads:    1
    conda:
        "envs/HTSeq_pandas_samtools_seaborn.yaml"
    shell:
        "(python {input.script} \
        --DE_edgeR_table {input.table_all} \
        --comparison_name {params.comparison_name} \
        --mirnas {input.mirnas} \
        --out {output.out} \
        --verbose;) &> {log}"

# ################################################################################
# ### Filter miRNAs in order to see on the general statistics RNAs that we are not interested in
# ### (miRNA)
# ################################################################################

# rule filter_miRNAs:
#     input:
#         bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam"),
#         bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.bam.bai"),
#         gtf = os.path.join(config["output_dir"], "annotation", "c_elegans.WS220.annotations.trs.exon.corrected_with_gene_id.gtf"),
#         script = os.path.join(config["scripts"], "filter_RNAs.py"),
#     output:
#         bam = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.filter_mirnas.bam"),
#         bai = os.path.join(config["output_dir"], "{sample}", "bowtie", "alignment.sorted.filtered.unique_mappers.filter_mirnas.bam.bai")
#     params:
#         filter_RNAs = "\"miRNA\"",
#         filter_chromosomes = "chrM"
#     log:
#         os.path.join(config["local_log"],"filter_miRNAs_{sample}.log")
#     threads:    2
#     conda:
#         "envs/HTSeq_pandas_samtools_seaborn.yaml"
#     shell:
#         "(python {input.script} \
#         --gtf {input.gtf} \
#         --bam {input.bam} \
#         --filter_RNAs {params.filter_RNAs} \
#         --filter_chromosomes {params.filter_chromosomes} \
#         --bam_out {output.bam} \
#         --verbose; \
#         samtools index -@ {threads} {output.bam} {output.bai};)"

# ################################################################################
# ### Determine alignment statistics unique mappers and filter miRNAs
# ################################################################################

# rule alfa_aligment_statistics_unique_mappers_filter_miRNAs:
#     input:
#         bam = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.filter_mirnas.bam"), sample1=get_samples()),
#         bai = expand(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.filter_mirnas.bam.bai"), sample1=get_samples()),
#         alfa_index_stranded = os.path.join(config["output_dir"], "annotation", "alfa_genome_index.stranded.ALFA_index")
#     output:
#         pdf = os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers_filter_miRNAs", "alfa_aligment_statistics_unique_mappers_filter_miRNAs.Biotypes.pdf")
#     params:
#         genome_index_basename = os.path.join(config["output_dir"], "annotation", "alfa_genome_index"),
#         output_prefix = "alfa_aligment_statistics_unique_mappers_filter_miRNAs",
#         output_dir = os.path.abspath(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers_filter_miRNAs")),
#         bam_and_sample_name = expand(str(os.path.join(config["output_dir"], "{sample1}", "bowtie", "alignment.sorted.filtered.unique_mappers.filter_mirnas.bam ")) +str("{sample1}"), sample1=get_samples()),
#         strandness = "forward"
#     log:
#         os.path.join(config["local_log"], "alfa_aligment_statistics_unique_mappers_filter_miRNAs.log")
#     threads:    20
#     conda:
#         "envs/alfa.yaml"
#     shell:
#         "(mkdir -p {params.output_dir}; \
#         alfa \
#         -g {params.genome_index_basename} \
#         --bam {params.bam_and_sample_name} \
#         -d 2 \
#         --keep_ambiguous \
#         --processors {threads} \
#         --strandness {params.strandness} \
#         --pdf {params.output_prefix} \
#         --temp_dir {params.output_dir} \
#         -o {params.output_dir}; \
#         ) &> {log}"

# ################################################################################
# ### Multiqc
# ################################################################################

# rule multiqc:
#     input:
#         pdf_alfa_aligment_statistics = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics", "alfa_aligment_statistics.Biotypes.pdf"), sample=get_samples()),
#         pdf_alfa_aligment_statistics_filter = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_filter", "alfa_aligment_statistics_filter.Biotypes.pdf"), sample=get_samples()),
#         pdf_alfa_aligment_statistics_unique_mappers = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers", "alfa_aligment_statistics_unique_mappers.Biotypes.pdf"), sample=get_samples()),
#         pdf_alfa_aligment_statistics_unique_mappers_filter_miRNAs = expand(os.path.join(config["output_dir"], "plots", "alfa_aligment_statistics_unique_mappers_filter_miRNAs", "alfa_aligment_statistics_unique_mappers_filter_miRNAs.Biotypes.pdf"), sample=get_samples()),
#         fastqc = expand(os.path.join(config["output_dir"], "{sample}", "fastqc"), sample=get_samples()),
#         plot_small_RNAs = expand(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs"),
#                                  zip,
#                                  experiment1 = [i[0]  for i in list(config["combinations"])],
#                                  experiment2 = [i[1]  for i in list(config["combinations"])]),
#         plot_small_RNAs_unique_mappers = expand(os.path.join(config["output_dir"], "DE__{experiment1}__{experiment2}", "plot_small_RNAs_unique_mappers"),
#                                  zip,
#                                  experiment1 = [i[0]  for i in list(config["combinations"])],
#                                  experiment2 = [i[1]  for i in list(config["combinations"])])
#     output:
#         multiqc_dir = directory(os.path.join(config["output_dir"], "summary", "qc"))
#     log:
#         os.path.join(config["local_log"], "multiqc_fastqc.log")
#     conda:
#         "envs/multiqc.yaml"
#     shell:
#         "(multiqc --outdir {output.multiqc_dir} results logs) &> {log}"
